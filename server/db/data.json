[
    {
        "title": "CSS实现宽度自适应，宽高比16：9的矩形",
        "content": "### 利用`padding-top`的简易实现\n```javascript\n<div class='item'></div>\n\n<style>\n.item {\n  background: #f40;\n  width: 50%;\n  padding-top: 50%;\n}\n</style>\n```\n   该方法的优点是代码少，易于编写和解读。然而`padding-top`的设置将导致对应元素盒模型的更改，可能会影响元素内容的排版。\n### 利用伪元素的实现方式\n```javascript\n<div class='item'></div>\n\n<style>\n.item {\n  background: #f40;\n  width: 50%;\n}\n.item::before {\n  padding-top: 50%;\n  float: left;\n  content: '';\n}\n.item::after {\n  content: '';\n  display: block;\n  clear: both;\n}\n</style>\n```\n   相比于直接使用`padding-top`，该方法不会影响元素的内容。",
        "date": "Fri Oct 20 2020 16:24:09 GMT+0800 (中国标准时间)"
    },
    {
        "title": "css绘制三角形",
        "content": "### 利用`border`进行绘制\n```javascript\n<div class='item'></div>\n\n<style>\n.item {\n  width: 0;\n  border: 25px solid transparent;\n  border-top: 25px solid #f40;\n  display: inline-block;\n}\n</style>\n```\n示例\n<div class='item'></div>\n\n<style>\n.item {\n  width: 0;\n  border: 25px solid transparent;\n  border-top: 25px solid #f40;\n  display: inline-block;\n}\n</style>",
        "date": "Fri Oct 20 2020 16:34:15 GMT+0800 (中国标准时间)"
    },
    {
        "title": "加载动画",
        "content": "### 代码\n```javascript\n<div class='wrap'>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n</div>\n\n<style>\n.wrap {\n  width: 25px;\n  height: 25px;\n  position: relative;\n}\n.item {\n  width: 25px;\n  height: 25px;\n  position: absolute;\n  top: 0;\n  animation: opacityAnimation 1.2s infinite;\n}\n.item::before {\n  content: '';\n  width: 4px;\n  height: 4px;\n  border-radius: 50%;\n  background: #000;\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n}\n.item:nth-child(1) { transform: rotate(30deg); animation-delay: -1.1s; }\n.item:nth-child(2) { transform: rotate(60deg); animation-delay: -1s; }\n.item:nth-child(3) { transform: rotate(90deg); animation-delay: -0.9s; }\n.item:nth-child(4) { transform: rotate(120deg); animation-delay: -0.8s; }\n.item:nth-child(5) { transform: rotate(150deg); animation-delay: -0.7s; }\n.item:nth-child(6) { transform: rotate(180deg); animation-delay: -0.6s; }\n.item:nth-child(7) { transform: rotate(210deg); animation-delay: -0.5s; }\n.item:nth-child(8) { transform: rotate(240deg); animation-delay: -0.4s; }\n.item:nth-child(9) { transform: rotate(270deg); animation-delay: -0.3s; }\n.item:nth-child(10) { transform: rotate(300deg); animation-delay: -0.2s; }\n.item:nth-child(11) { transform: rotate(330deg); animation-delay: -0.1s; }\n@keyframes opacityAnimation {\n  0% {\n    opacity: 0.9;\n  } 100% {\n    opacity: 0.2;\n  }\n}\n</style>\n```\n### 示例\n<div class='wrap'>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n  <div class='item'></div>\n</div>\n\n<style>\n.wrap {\n  width: 25px;\n  height: 25px;\n  position: relative;\n}\n.item {\n  width: 25px;\n  height: 25px;\n  position: absolute;\n  top: 0;\n  animation: opacityAnimation 1.2s infinite;\n}\n.item::before {\n  content: '';\n  width: 4px;\n  height: 4px;\n  border-radius: 50%;\n  background: #000;\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n}\n.item:nth-child(1) { transform: rotate(30deg); animation-delay: -1.1s; }\n.item:nth-child(2) { transform: rotate(60deg); animation-delay: -1s; }\n.item:nth-child(3) { transform: rotate(90deg); animation-delay: -0.9s; }\n.item:nth-child(4) { transform: rotate(120deg); animation-delay: -0.8s; }\n.item:nth-child(5) { transform: rotate(150deg); animation-delay: -0.7s; }\n.item:nth-child(6) { transform: rotate(180deg); animation-delay: -0.6s; }\n.item:nth-child(7) { transform: rotate(210deg); animation-delay: -0.5s; }\n.item:nth-child(8) { transform: rotate(240deg); animation-delay: -0.4s; }\n.item:nth-child(9) { transform: rotate(270deg); animation-delay: -0.3s; }\n.item:nth-child(10) { transform: rotate(300deg); animation-delay: -0.2s; }\n.item:nth-child(11) { transform: rotate(330deg); animation-delay: -0.1s; }\n@keyframes opacityAnimation {\n  0% {\n    opacity: 0.9;\n  } 100% {\n    opacity: 0.2;\n  }\n}\n</style>",
        "date": "Fri Oct 20 2020 17:40:18 GMT+0800 (中国标准时间)"
    },
    {
        "title": "点赞动画（一）",
        "content": "### 简介\n   从本篇开始将制作一个点赞动画，该动画主要由3个小动画组成，本篇文章将绘制图形的初始状态，接下来几篇文章将逐步绘制动画。\n### 代码\n```javascript\n<div class='container' style='position: relative';>\n  <canvas width='70px' height='70px'></canvas>\n  <svg style='position: absolute;left: 20px;top: 21px;' t='1603294100131' class='icon' viewBox='0 0 1024 1024' version='1.1' xmlns='http://www.w3.org/2000/svg' p-id='7753' width='32' height='32'><path d='M512 908.153535l-4.783838-0.90505c-71.628283-13.705051-157.478788-56.113131-235.571718-116.492929-41.244444-31.935354-78.092929-67.10303-109.381818-104.59798-34.391919-41.373737-61.155556-84.29899-79.515151-127.870707-23.531313-55.854545-33.228283-116.234343-28.185859-174.804041 4.783838-55.725253 22.755556-108.347475 51.846465-152.177777 47.967677-72.274747 121.793939-113.777778 202.472727-113.777778 35.426263 0 71.628283 7.886869 107.830303 23.272727 32.064646 13.705051 64 33.486869 95.288889 58.828283 31.288889-25.341414 63.224242-45.123232 95.288889-58.828283 36.072727-15.515152 72.40404-23.272727 107.830303-23.272727 80.678788 0 154.505051 41.50303 202.472727 113.777778 29.090909 43.830303 47.062626 96.452525 51.846465 152.177777 5.042424 58.569697-4.654545 118.949495-28.185859 174.804041-18.359596 43.442424-45.123232 86.49697-79.515151 127.741414-31.288889 37.494949-68.008081 72.662626-109.381818 104.59798-77.963636 60.379798-163.814141 102.787879-235.571718 116.492929l-4.783838 1.034343z' fill='#999' p-id='7754'></path></svg>\n</div>\n<script>\n  const container = document.querySelector('.container')\n  const canvas = container.querySelector('canvas')\n  const ctx = canvas.getContext('2d')\n  const w = 35\n  const h = w\n  const r = 23\n\n  function init() {\n    ctx.beginPath();\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#999';\n    ctx.arc(w, h, r, 0, 2 * Math.PI);\n    ctx.stroke();\n  }\n  init()\n</script>\n```",
        "date": "Fri Oct 22 2020 20:40:05 GMT+0800 (中国标准时间)"
    },
    {
        "title": "点赞动画（二）",
        "content": "### 简介\n   第一个小动画将在图案的边界不断重绘一段色彩鲜艳且弧度越来越大的圆弧，动画耗时500ms，动画完成时该圆弧的弧度将达到360°，即环绕一周。\n### 代码\n```javascript\nconst container = document.querySelector('.container')\nconst canvas = container.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\nconst w = 35\nconst h = w\nconst r = 23\n\nlet start;\nconst startAngle = 0.5 * Math.PI\nlet progress = startAngle\nconst animationTime = 500\n\nfunction drawArc(elapsed) {\n  const nowProgress = elapsed / animationTime * 2 * Math.PI + startAngle\n  ctx.arc(w, h, r, progress, nowProgress)\n  progress = nowProgress\n  ctx.stroke()\n}\n\nfunction step(timestamp) {\n  if (start === undefined) {\n    start = timestamp\n  }\n  const elapsed = timestamp - start\n  drawArc(elapsed)\n  if (elapsed < animationTime) {\n    requestAnimationFrame(step)\n  }\n}\n\ncontainer.addEventListener('click', () => {\n  ctx.beginPath();\n  ctx.strokeStyle = '#ffc600'\n  ctx.moveTo(w, h + r)\n  requestAnimationFrame(step)\n})\n```",
        "date": "Fri Oct 22 2020 20:45:05 GMT+0800 (中国标准时间)"
    },
    {
        "title": "点赞动画（三）",
        "content": "### 简介\n   第二个小动画将从图案的边界不断重绘色彩鲜艳、半径越来越小且线条粗细越来越粗的的圆环，半径变小速度与线条变粗速度大小相同，即动画将使色彩填满整个图案，该动画耗时500ms。\n### 代码\n```javascript\nconst container = document.querySelector('.container')\nconst canvas = container.querySelector('canvas')\nconst mindColor = container.querySelector('svg path')\nconst ctx = canvas.getContext('2d')\nconst w = 35\nconst h = w\nconst r = 23\n\nlet start;\nlet progress\nconst animationTime = 500\n\nfunction drawCircle(elapsed) {\n  ctx.beginPath();\n  let progress = elapsed / animationTime\n  progress = progress > 1 ? 1 : progress\n  ctx.lineWidth = 2 + r * progress\n  ctx.arc(w, h, r * (1 - progress), 0, 2 * Math.PI)\n  ctx.stroke();\n}\n\nfunction step(timestamp) {\n  if (start === undefined) {\n    start = timestamp\n  }\n  const elapsed = timestamp - start\n  mindColor.style.display = 'none'\n  drawCircle(elapsed)\n  if (elapsed < animationTime) {\n    requestAnimationFrame(step)\n  }\n}\n\ncontainer.addEventListener('click', () => {\n  ctx.beginPath();\n  ctx.strokeStyle = '#ffc600'\n  ctx.moveTo(w, h + r)\n  requestAnimationFrame(step)\n})\n```",
        "date": "Fri Oct 22 2020 20:52:05 GMT+0800 (中国标准时间)"
    },
    {
        "title": "点赞动画（四）",
        "content": "### 简介\n   第三个小动画将使图案先快后慢地扩大和缩小，同时使中心图案显现并改变颜色，该动画耗时250ms。\n### 代码\n```javascript\nconst container = document.querySelector('.container')\nconst canvas = container.querySelector('canvas')\nconst mindColor = container.querySelector('svg path')\nconst ctx = canvas.getContext('2d')\nconst w = 35\nconst h = w\nconst r = 23\n\nlet start;\nlet progress\nconst animationTime = 250\n\nfunction expand(elapsed) {\n  let durationProgress = elapsed / animationTime\n  const progress = durationProgress < 0.4 ? 0.75 * durationProgress : (1 - durationProgress) / 2\n  canvas.style.transform = 'scale(' + (progress + 1) + ')'\n}\n\nfunction step(timestamp) {\n  if (start === undefined) {\n    start = timestamp\n  }\n  const elapsed = timestamp - start\n  mindColor.getAttribute('fill') !== '#fe8e8f' && mindColor.setAttribute('fill', '#ff7a7b')\n  mindColor.style.display = 'block'\n  expand(elapsed)\n  if (elapsed < animationTime) {\n    requestAnimationFrame(step)\n  }\n}\n\ncontainer.addEventListener('click', () => {\n  requestAnimationFrame(step)\n})\n```",
        "date": "Fri Oct 22 2020 20:58:05 GMT+0800 (中国标准时间)"
    },
    {
        "title": "点赞动画（五）",
        "content": "### 简介\n   点赞动画的所有代码整理如下，总用时共1250ms。\n### 代码\n```javascript\n<div class='container' style='position: relative;'>\n  <canvas width='70px' height='70px'></canvas>\n  <svg style='position: absolute;left: 20px;top: 21px;' t='1603294100131' class='icon' viewBox='0 0 1024 1024' version='1.1' xmlns='http://www.w3.org/2000/svg' p-id='7753' width='32' height='32'><path d='M512 908.153535l-4.783838-0.90505c-71.628283-13.705051-157.478788-56.113131-235.571718-116.492929-41.244444-31.935354-78.092929-67.10303-109.381818-104.59798-34.391919-41.373737-61.155556-84.29899-79.515151-127.870707-23.531313-55.854545-33.228283-116.234343-28.185859-174.804041 4.783838-55.725253 22.755556-108.347475 51.846465-152.177777 47.967677-72.274747 121.793939-113.777778 202.472727-113.777778 35.426263 0 71.628283 7.886869 107.830303 23.272727 32.064646 13.705051 64 33.486869 95.288889 58.828283 31.288889-25.341414 63.224242-45.123232 95.288889-58.828283 36.072727-15.515152 72.40404-23.272727 107.830303-23.272727 80.678788 0 154.505051 41.50303 202.472727 113.777778 29.090909 43.830303 47.062626 96.452525 51.846465 152.177777 5.042424 58.569697-4.654545 118.949495-28.185859 174.804041-18.359596 43.442424-45.123232 86.49697-79.515151 127.741414-31.288889 37.494949-68.008081 72.662626-109.381818 104.59798-77.963636 60.379798-163.814141 102.787879-235.571718 116.492929l-4.783838 1.034343z' fill='#999' p-id='7754'></path></svg>\n</div>\n\n<script>\n  const container = document.querySelector('.container')\n  const canvas = container.querySelector('canvas')\n  const mindColor = container.querySelector('svg path')\n  const ctx = canvas.getContext('2d')\n  const w = 35\n  const h = w\n  const r = 23\n\n  let start;\n  const startAngle = 0.5 * Math.PI\n  let progress = startAngle;\n  const animationTime = [500, 500, 250]\n\n  function init() {\n    ctx.beginPath();\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#999';\n    ctx.arc(w, h, r, 0, 2 * Math.PI);\n    ctx.stroke();\n  }\n\n  function drawArc(elapsed) {\n    const nowProgress = elapsed / animationTime[0] * 2 * Math.PI + startAngle\n    ctx.arc(w, h, r, progress, nowProgress);\n    progress = nowProgress\n    ctx.stroke();\n  }\n\n  function drawCircle(elapsed) {\n    ctx.beginPath();\n    let progress = (elapsed - animationTime[0]) / animationTime[1]\n    ctx.lineWidth = 2 + r * progress\n    ctx.arc(w, h, r * (1 - progress), 0, 2 * Math.PI)\n    ctx.stroke();\n  }\n\n  function expand(elapsed) {\n    let durationProgress = (elapsed - animationTime[0] - animationTime[1]) / animationTime[2]\n    const progress = durationProgress < 0.4 ? 0.75 * durationProgress : (1 - durationProgress) / 2\n    canvas.style.transform = 'scale(' + (progress + 1) + ')'\n  }\n\n  function step(timestamp) {\n    if (start === undefined) {\n      start = timestamp;\n    }\n    const elapsed = timestamp - start;\n    if (elapsed < animationTime[0]) {\n        drawArc(elapsed)\n    } else if (elapsed < animationTime[0] + animationTime[1]) {\n        mindColor.style.display = 'none'\n        drawCircle(elapsed)\n    } else {\n        mindColor.getAttribute('fill') !== '#fe8e8f' && mindColor.setAttribute('fill', '#ff7a7b')\n        mindColor.style.display = 'block'\n        expand(elapsed)\n    }\n    if (elapsed < animationTime[0] + animationTime[1] + animationTime[2]) {\n        requestAnimationFrame(step);\n    }\n  }\n\n  init()\n\n  container.addEventListener('click', () => {\n    ctx.beginPath();\n    ctx.strokeStyle = '#ffc600';\n    ctx.moveTo(w, h + r)\n    requestAnimationFrame(step)\n  })\n</script>\n```",
        "date": "Fri Oct 22 2020 21:07:05 GMT+0800 (中国标准时间)"
    }
]
